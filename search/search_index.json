{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"location":"","text":"DrugDiscMDConformers \u00b6 Welcome to the documentation for the DrugDiscMDConformers code! Here you will find everything you need to get started with your own Python package.","title":"Home"},{"location":"#drugdiscmdconformers","text":"Welcome to the documentation for the DrugDiscMDConformers code! Here you will find everything you need to get started with your own Python package.","title":"DrugDiscMDConformers"},{"location":"example_docs/about/changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.0.2] \u00b6 Added \u00b6 Added .pre-commit-config.yaml Changed \u00b6 Use ruff for formatting [0.0.1] \u00b6 Added \u00b6 The initial release!","title":"Changelog"},{"location":"example_docs/about/changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"example_docs/about/changelog/#002","text":"","title":"[0.0.2]"},{"location":"example_docs/about/changelog/#added","text":"Added .pre-commit-config.yaml","title":"Added"},{"location":"example_docs/about/changelog/#changed","text":"Use ruff for formatting","title":"Changed"},{"location":"example_docs/about/changelog/#001","text":"","title":"[0.0.1]"},{"location":"example_docs/about/changelog/#added_1","text":"The initial release!","title":"Added"},{"location":"example_docs/about/conduct/","text":"Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"example_docs/about/conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"example_docs/about/conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"example_docs/about/conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"example_docs/about/conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"example_docs/about/conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"example_docs/about/conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"example_docs/about/conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"example_docs/about/conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"example_docs/about/conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"example_docs/about/conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"example_docs/about/conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"example_docs/about/conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"example_docs/about/license/","text":"License \u00b6 LICENSE.md BSD 3-Clause License Copyright (c) 2024 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"example_docs/about/license/#license","text":"LICENSE.md BSD 3-Clause License Copyright (c) 2024 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"example_docs/code/hints/","text":"Type Hinting \u00b6 Overview \u00b6 In the sample functions provided with the DrugDiscMDConformers repository, you will see something like: def make_array(val: float, length: int = 3) -> NDArray: If you aren't familiar with type-hinting , that's what the : float , : int , and -> NDArray are indicating. They tell the user what the expected types are for each parameter and return. They are not enforced in any way; they are merely hints (as the name suggests). It is always advisable to use type hints in your code, so get in the habit of doing so! Tip If you have to import a given function solely for type-hinting purposes, you should put it within an if TYPE_CHECKING block (as demonstrated in /src/DrugDiscMDConformers/examples/sample.py ). It will then only be imported when using a type-checking utility, reducing the overall import time of your module. Note You do not need to touch the py.typed file. It is a marker that Python uses to indicate that type-hinting should be used in any programs that depend on your code. Type Checking \u00b6 As mentioned, the type hints are just that: hints. If you want to ensure that the types are strictly adhered to across your codebase, you can use mypy to do so. This is a slightly more advanced tool, however, so is not something you need to worry about right now.","title":"Type Hinting"},{"location":"example_docs/code/hints/#type-hinting","text":"","title":"Type Hinting"},{"location":"example_docs/code/hints/#overview","text":"In the sample functions provided with the DrugDiscMDConformers repository, you will see something like: def make_array(val: float, length: int = 3) -> NDArray: If you aren't familiar with type-hinting , that's what the : float , : int , and -> NDArray are indicating. They tell the user what the expected types are for each parameter and return. They are not enforced in any way; they are merely hints (as the name suggests). It is always advisable to use type hints in your code, so get in the habit of doing so! Tip If you have to import a given function solely for type-hinting purposes, you should put it within an if TYPE_CHECKING block (as demonstrated in /src/DrugDiscMDConformers/examples/sample.py ). It will then only be imported when using a type-checking utility, reducing the overall import time of your module. Note You do not need to touch the py.typed file. It is a marker that Python uses to indicate that type-hinting should be used in any programs that depend on your code.","title":"Overview"},{"location":"example_docs/code/hints/#type-checking","text":"As mentioned, the type hints are just that: hints. If you want to ensure that the types are strictly adhered to across your codebase, you can use mypy to do so. This is a slightly more advanced tool, however, so is not something you need to worry about right now.","title":"Type Checking"},{"location":"example_docs/code/source/","text":"Source Code \u00b6 Adding Your Code \u00b6 All source code (i.e. your various modules, functions, classes, and so on) should be placed in the /src/<MyPackageName> directory. A sample file named examples/sample.py is included here as a representative example, which you should replace. All the code in the src directory can be imported now that you have installed your package. Tip As an example, you can import and use the demonstration DrugDiscMDConformers.examples.sample functions as follows: from MyPackageName.examples.sample import add , make_array print ( add ( 1 , 2 )) # 3 print ( make_array ( 3 , length = 4 )) # [3, 3, 3, 3] Note For any subfolder within src/<MyPackageName> containing Python code, you must have an __init__.py file, which will tell Python that this is a module you can import. Docstrings \u00b6 The code comments beneath each function are called docstrings. They should provide an overview of the purpose of the function, the various parameters, and the return values (if any). Here, we are using the NumPy style docstrings, but you can pick a different style if you like later on.","title":"Source Code"},{"location":"example_docs/code/source/#source-code","text":"","title":"Source Code"},{"location":"example_docs/code/source/#adding-your-code","text":"All source code (i.e. your various modules, functions, classes, and so on) should be placed in the /src/<MyPackageName> directory. A sample file named examples/sample.py is included here as a representative example, which you should replace. All the code in the src directory can be imported now that you have installed your package. Tip As an example, you can import and use the demonstration DrugDiscMDConformers.examples.sample functions as follows: from MyPackageName.examples.sample import add , make_array print ( add ( 1 , 2 )) # 3 print ( make_array ( 3 , length = 4 )) # [3, 3, 3, 3] Note For any subfolder within src/<MyPackageName> containing Python code, you must have an __init__.py file, which will tell Python that this is a module you can import.","title":"Adding Your Code"},{"location":"example_docs/code/source/#docstrings","text":"The code comments beneath each function are called docstrings. They should provide an overview of the purpose of the function, the various parameters, and the return values (if any). Here, we are using the NumPy style docstrings, but you can pick a different style if you like later on.","title":"Docstrings"},{"location":"example_docs/code/tests/","text":"Testing \u00b6 Overview \u00b6 Writing effective tests for your code is a crucial part of the programming process. It is the best way to ensure that changes you make to your codebase throughout the development process do not break the core functionality of your code. This may be your first time writing tests, but trust me that it is essential. Pytest \u00b6 Put any unit tests in the /tests folder. A sample test (i.e. /tests/sample/examples/test_sample.py ) is included as a representative example. Note All your testing scripts should start with test_ in the filename. When you installed the package with the [dev] extras, you installed everything you need to run your unit tests. To run the unit tests locally, run pytest . in the base directory. It will let you know if any tests fail and what the reason is for each failure.","title":"Testing"},{"location":"example_docs/code/tests/#testing","text":"","title":"Testing"},{"location":"example_docs/code/tests/#overview","text":"Writing effective tests for your code is a crucial part of the programming process. It is the best way to ensure that changes you make to your codebase throughout the development process do not break the core functionality of your code. This may be your first time writing tests, but trust me that it is essential.","title":"Overview"},{"location":"example_docs/code/tests/#pytest","text":"Put any unit tests in the /tests folder. A sample test (i.e. /tests/sample/examples/test_sample.py ) is included as a representative example. Note All your testing scripts should start with test_ in the filename. When you installed the package with the [dev] extras, you installed everything you need to run your unit tests. To run the unit tests locally, run pytest . in the base directory. It will let you know if any tests fail and what the reason is for each failure.","title":"Pytest"},{"location":"example_docs/github/commits/","text":"Saving Your Work \u00b6 There are still a few more steps left, but at this point you will want to make sure to save your work! Pushing Your Changes \u00b6 Commit any changes you've made and push them to your repository If you are using a program like GitKraken, this will involve the following steps: Save your work. Recommended: make a new branch for your work (e.g. develop ) Click \"Stage all changes\". Add a helpful commit message. Commit the changes. Click \"push\". Tip It is advisable to make changes in a new branch rather than in main so that you can ensure your unit tests pass before the code is merged into the codebase. Then go on GitHub to see your changes. Assuming you pushed your changes to a new branch, you'll likely see a message asking if you want to make a Pull Request to merge in your changes into the main branch.","title":"Saving Your Work"},{"location":"example_docs/github/commits/#saving-your-work","text":"There are still a few more steps left, but at this point you will want to make sure to save your work!","title":"Saving Your Work"},{"location":"example_docs/github/commits/#pushing-your-changes","text":"Commit any changes you've made and push them to your repository If you are using a program like GitKraken, this will involve the following steps: Save your work. Recommended: make a new branch for your work (e.g. develop ) Click \"Stage all changes\". Add a helpful commit message. Commit the changes. Click \"push\". Tip It is advisable to make changes in a new branch rather than in main so that you can ensure your unit tests pass before the code is merged into the codebase. Then go on GitHub to see your changes. Assuming you pushed your changes to a new branch, you'll likely see a message asking if you want to make a Pull Request to merge in your changes into the main branch.","title":"Pushing Your Changes"},{"location":"example_docs/github/workflows/","text":"GitHub Actions \u00b6 Workflows \u00b6 The last major piece of the puzzle is GitHub Actions, which is an automated suite of workflows that run every time a commit or pull request is made. The GitHub workflows can be found in the .github/workflows folder. Tests \u00b6 The /.github/workflows/tests.yaml file contains the workflow to have GitHub automatically run the full suite of tests on every commit and pull request. For the most basic case outlined here, you do not need to make any modifications (other than, perhaps, the desired Python versions you wish to test on). By default, the test suite is set up to install the following packages: pip install -r tests/requirements.txt pip install . [ dev ] As you can see above, it will install specific versions of the dependencies outlined in /tests/requirements.txt . Unlike pyproject.toml , you want to include specific versions here so that your test suite is reproducible. The /.github/dependabot.yml file is set up such that Dependabot will automatically open pull requests to update any versions in your /tests/requirements.txt file as they come out so that your code will always be tested on the newest releases of the various dependencies. This will ensure that your code doesn't break as dependencies update, but if it does, you will know what needs fixing. Documentation \u00b6 The /.github/workflows/docs.yaml file contains the workflow to have GitHub test the build process for the documentation and deploy it (if enabled). To have your documentation automatically deployed on a GitHub webpage: Go to the settings page of your repository. Click the \"Pages\" section under \"Code and automation.\" Select \"Deploy from a branch\" under \"Source\" Set the branch to be \"gh-pages\" with \"/ (root)\" as the folder. Wait a minute and refresh the page. You'll see a message that your site is live with a URL to the documentation. Once this process is done, the documentation will be live and will update with each commit. Release \u00b6 The /.github/workflows/release.yaml file contains the workflow to have GitHub upload your package to PyPI every time you mint a new release on GitHub. This is a slightly more advanced topic that you can read more about at a later time, but it's there for when you need it.","title":"GitHub Actions"},{"location":"example_docs/github/workflows/#github-actions","text":"","title":"GitHub Actions"},{"location":"example_docs/github/workflows/#workflows","text":"The last major piece of the puzzle is GitHub Actions, which is an automated suite of workflows that run every time a commit or pull request is made. The GitHub workflows can be found in the .github/workflows folder.","title":"Workflows"},{"location":"example_docs/github/workflows/#tests","text":"The /.github/workflows/tests.yaml file contains the workflow to have GitHub automatically run the full suite of tests on every commit and pull request. For the most basic case outlined here, you do not need to make any modifications (other than, perhaps, the desired Python versions you wish to test on). By default, the test suite is set up to install the following packages: pip install -r tests/requirements.txt pip install . [ dev ] As you can see above, it will install specific versions of the dependencies outlined in /tests/requirements.txt . Unlike pyproject.toml , you want to include specific versions here so that your test suite is reproducible. The /.github/dependabot.yml file is set up such that Dependabot will automatically open pull requests to update any versions in your /tests/requirements.txt file as they come out so that your code will always be tested on the newest releases of the various dependencies. This will ensure that your code doesn't break as dependencies update, but if it does, you will know what needs fixing.","title":"Tests"},{"location":"example_docs/github/workflows/#documentation","text":"The /.github/workflows/docs.yaml file contains the workflow to have GitHub test the build process for the documentation and deploy it (if enabled). To have your documentation automatically deployed on a GitHub webpage: Go to the settings page of your repository. Click the \"Pages\" section under \"Code and automation.\" Select \"Deploy from a branch\" under \"Source\" Set the branch to be \"gh-pages\" with \"/ (root)\" as the folder. Wait a minute and refresh the page. You'll see a message that your site is live with a URL to the documentation. Once this process is done, the documentation will be live and will update with each commit.","title":"Documentation"},{"location":"example_docs/github/workflows/#release","text":"The /.github/workflows/release.yaml file contains the workflow to have GitHub upload your package to PyPI every time you mint a new release on GitHub. This is a slightly more advanced topic that you can read more about at a later time, but it's there for when you need it.","title":"Release"},{"location":"example_docs/installation/install/","text":"Pip Installing \u00b6 Now it's time to install your Python package! You will want to install your Python package in \"editable\" mode, which means you won't have to re-install your code every time you make updates to it. Additionally, you will want to install several optional dependencies (listed under the [project.optional-dependencies] header in pyproject.toml ) to ensure that you can test and build the documentation for your code. With all this in mind, you will want to run the following in the command line from the base of the package directory: pip install -e . [ dev,docs ] Here, the -e means editable mode, the . means the current directory, and the [dev,docs] means it will install the \"dev\" and \"docs\" optional dependency set listed in the pyproject.toml file. Tip You should generally start from a clean Python environment, such as a new Conda environment if you are using Anaconda or one of its variants. To make sure you installed your package successfully, open a Python console and run import <MyPackageName> . It should return without any errors. If there are errors, it's likely because you forgot to replace a \"DrugDiscMDConformers\" placeholder with the name of your package.","title":"Pip Installing"},{"location":"example_docs/installation/install/#pip-installing","text":"Now it's time to install your Python package! You will want to install your Python package in \"editable\" mode, which means you won't have to re-install your code every time you make updates to it. Additionally, you will want to install several optional dependencies (listed under the [project.optional-dependencies] header in pyproject.toml ) to ensure that you can test and build the documentation for your code. With all this in mind, you will want to run the following in the command line from the base of the package directory: pip install -e . [ dev,docs ] Here, the -e means editable mode, the . means the current directory, and the [dev,docs] means it will install the \"dev\" and \"docs\" optional dependency set listed in the pyproject.toml file. Tip You should generally start from a clean Python environment, such as a new Conda environment if you are using Anaconda or one of its variants. To make sure you installed your package successfully, open a Python console and run import <MyPackageName> . It should return without any errors. If there are errors, it's likely because you forgot to replace a \"DrugDiscMDConformers\" placeholder with the name of your package.","title":"Pip Installing"},{"location":"example_docs/installation/pyproject/","text":"pyproject.toml \u00b6 The pyproject.toml file contains all of the necessary information on how Python will install your package. Metadata \u00b6 There are several metadata-related fields that you will likely want to update. You should have already updated the name of the package in a prior step when you replaced \"DrugDiscMDConformers\" everywhere, but you will also want to change the following: description license (if you changed the default LICENSE.md file) authors keywords Aside from the name , none of the above are strictly necessary and can be left as-is (or removed) if you are unsure. Dependencies \u00b6 The most important fields to update are related to the dependencies: the Python packages that your own code relies on. This will ensure that they are automatically installed when installing your Python package. The required dependencies are listed under the [project] header in the dependencies field. By default, the DrugDiscMDConformers repository lists [\"numpy\"] . Include any dependencies you want in this list, separated by commas. This should be all the packages you import in your code that are not standard Python libraries. Tip Not sure what dependencies you need just yet? No problem. You can come back to this later. Note If you know a specific minimum version is needed for your code, you should set that here as well (e.g. [\"numpy>=1.23.0\"] ). However, only use this when it is necessary so that users aren't restricted to a given version without a valid reason. Python Version \u00b6 If you know your code can only run on certain Python versions, you should specify that in the requires-python field under the [project] header. When in doubt, we recommend setting it to the range of currently supported Python versions (specifically those with security and bugfix statuses). You can also update the listed versions in the classifiers field, although this is only for informational purposes. The list of supported Python classifier fields can be found on the corresponding PyPI page .","title":"pyproject.toml"},{"location":"example_docs/installation/pyproject/#pyprojecttoml","text":"The pyproject.toml file contains all of the necessary information on how Python will install your package.","title":"pyproject.toml"},{"location":"example_docs/installation/pyproject/#metadata","text":"There are several metadata-related fields that you will likely want to update. You should have already updated the name of the package in a prior step when you replaced \"DrugDiscMDConformers\" everywhere, but you will also want to change the following: description license (if you changed the default LICENSE.md file) authors keywords Aside from the name , none of the above are strictly necessary and can be left as-is (or removed) if you are unsure.","title":"Metadata"},{"location":"example_docs/installation/pyproject/#dependencies","text":"The most important fields to update are related to the dependencies: the Python packages that your own code relies on. This will ensure that they are automatically installed when installing your Python package. The required dependencies are listed under the [project] header in the dependencies field. By default, the DrugDiscMDConformers repository lists [\"numpy\"] . Include any dependencies you want in this list, separated by commas. This should be all the packages you import in your code that are not standard Python libraries. Tip Not sure what dependencies you need just yet? No problem. You can come back to this later. Note If you know a specific minimum version is needed for your code, you should set that here as well (e.g. [\"numpy>=1.23.0\"] ). However, only use this when it is necessary so that users aren't restricted to a given version without a valid reason.","title":"Dependencies"},{"location":"example_docs/installation/pyproject/#python-version","text":"If you know your code can only run on certain Python versions, you should specify that in the requires-python field under the [project] header. When in doubt, we recommend setting it to the range of currently supported Python versions (specifically those with security and bugfix statuses). You can also update the listed versions in the classifiers field, although this is only for informational purposes. The list of supported Python classifier fields can be found on the corresponding PyPI page .","title":"Python Version"},{"location":"example_docs/intro/resources/","text":"Resources \u00b6 Software Development \u00b6 Looking for external resources to get started with software development? Here are some useful ones: Scientific Python Development Guide Turing Way Guide for Reproducible Research Turing Way Guide for Project Design Git and Version Control \u00b6 For git and version control specifically: Git Guides Software Carpentry For GitHub: GitHub Docs GitHub Skills","title":"Resources"},{"location":"example_docs/intro/resources/#resources","text":"","title":"Resources"},{"location":"example_docs/intro/resources/#software-development","text":"Looking for external resources to get started with software development? Here are some useful ones: Scientific Python Development Guide Turing Way Guide for Reproducible Research Turing Way Guide for Project Design","title":"Software Development"},{"location":"example_docs/intro/resources/#git-and-version-control","text":"For git and version control specifically: Git Guides Software Carpentry For GitHub: GitHub Docs GitHub Skills","title":"Git and Version Control"},{"location":"example_docs/intro/why/","text":"Why? \u00b6 Purpose \u00b6 The first question to address is: why? Why use a DrugDiscMDConformers repository like this? Why make a Python package at all, as opposed to writing custom scripts or Jupyter Notebooks? The answer, in short, is sustainable and reproducible software development. Here are some of the benefits: Your package can be easily installed by others using pip . Your package can have automated unit tests that run every time you make a commit, making sure you don't accidentally break your own code. You can easily make and share documentation with no hassle. You will instantly be adopting good programming practices that will help you for life. Of course, there are many more reasons, but hopefully that's convincing enough! Alternatives \u00b6 This is by no means the only DrugDiscMDConformers of its kind. Some alternatives include: cookiecutter pyscaffold python-package-DrugDiscMDConformers ... and many more. Feel free to use them if you wish! This DrugDiscMDConformers repository exists because we are all opinionated people, and this DrugDiscMDConformers focuses on things that I value most. But the point is to just use something that works well for you.","title":"Why?"},{"location":"example_docs/intro/why/#why","text":"","title":"Why?"},{"location":"example_docs/intro/why/#purpose","text":"The first question to address is: why? Why use a DrugDiscMDConformers repository like this? Why make a Python package at all, as opposed to writing custom scripts or Jupyter Notebooks? The answer, in short, is sustainable and reproducible software development. Here are some of the benefits: Your package can be easily installed by others using pip . Your package can have automated unit tests that run every time you make a commit, making sure you don't accidentally break your own code. You can easily make and share documentation with no hassle. You will instantly be adopting good programming practices that will help you for life. Of course, there are many more reasons, but hopefully that's convincing enough!","title":"Purpose"},{"location":"example_docs/intro/why/#alternatives","text":"This is by no means the only DrugDiscMDConformers of its kind. Some alternatives include: cookiecutter pyscaffold python-package-DrugDiscMDConformers ... and many more. Feel free to use them if you wish! This DrugDiscMDConformers repository exists because we are all opinionated people, and this DrugDiscMDConformers focuses on things that I value most. But the point is to just use something that works well for you.","title":"Alternatives"},{"location":"example_docs/mkdocs/build/","text":"Building the Docs \u00b6 The mkdocs.yml File \u00b6 Once you have added your documentation, you will need to update the /mkdocs.yml file with information about how you want to arrange the files. Specifically, you will need to update the nav secction of the mkdocs.yml file to point to all your individual .md files, organizing them by category. Note Keep the - Code Documentation: reference/ line in the nav section of mkdocs.yml . It will automatically transform your docstrings into beautiful documentation! The rest of the nav items you can replace. The Build Process \u00b6 To see how your documentation will look in advance, you can build it locally by running the following command in the base directory: mkdocs serve A URL will be printed out that you can open in your browser. Deploying the Docs \u00b6 To allow your documentation to be visible via GitHub Pages, go to \"Settings > Pages\" in your repository's settings and make sure \"Branch\" is set to \"gh-pages\" instead of \"main\".","title":"Building the Docs"},{"location":"example_docs/mkdocs/build/#building-the-docs","text":"","title":"Building the Docs"},{"location":"example_docs/mkdocs/build/#the-mkdocsyml-file","text":"Once you have added your documentation, you will need to update the /mkdocs.yml file with information about how you want to arrange the files. Specifically, you will need to update the nav secction of the mkdocs.yml file to point to all your individual .md files, organizing them by category. Note Keep the - Code Documentation: reference/ line in the nav section of mkdocs.yml . It will automatically transform your docstrings into beautiful documentation! The rest of the nav items you can replace.","title":"The mkdocs.yml File"},{"location":"example_docs/mkdocs/build/#the-build-process","text":"To see how your documentation will look in advance, you can build it locally by running the following command in the base directory: mkdocs serve A URL will be printed out that you can open in your browser.","title":"The Build Process"},{"location":"example_docs/mkdocs/build/#deploying-the-docs","text":"To allow your documentation to be visible via GitHub Pages, go to \"Settings > Pages\" in your repository's settings and make sure \"Branch\" is set to \"gh-pages\" instead of \"main\".","title":"Deploying the Docs"},{"location":"example_docs/mkdocs/docs/","text":"Writing the Docs \u00b6 Mkdocs \u00b6 Now it's time to write some documentation! This isn't very difficult, and of course you're reading some documentation right now. The documentation is written using markdown, which is the same way GitHub comments are formatted. Tip Check out the Markdown Guide for an overview of the basic syntax. This DrugDiscMDConformers repository uses a documentation format called mkdocs, specifically a useful theme called Material for Mkdocs . This enables many wonderful goodies like the \"tip\" callout you see above and much more. Adding Markdown Files \u00b6 Your documentation will live in the /docs folder. You can think of each markdown ( .md ) file as being a specific page in the documentation, and each folder as being a related collection of pages. The markdown page you are reading right now is found at /docs/example_docs/mkdocs/docs.md , for instance. Of course, you will want to replce the /docs/example_docs folder with your own documentation. Note You typically do not need to touch the /docs/gen_ref_pages.py script. It is used to automatically build the documentation for your code from its docstrings.","title":"Writing the Docs"},{"location":"example_docs/mkdocs/docs/#writing-the-docs","text":"","title":"Writing the Docs"},{"location":"example_docs/mkdocs/docs/#mkdocs","text":"Now it's time to write some documentation! This isn't very difficult, and of course you're reading some documentation right now. The documentation is written using markdown, which is the same way GitHub comments are formatted. Tip Check out the Markdown Guide for an overview of the basic syntax. This DrugDiscMDConformers repository uses a documentation format called mkdocs, specifically a useful theme called Material for Mkdocs . This enables many wonderful goodies like the \"tip\" callout you see above and much more.","title":"Mkdocs"},{"location":"example_docs/mkdocs/docs/#adding-markdown-files","text":"Your documentation will live in the /docs folder. You can think of each markdown ( .md ) file as being a specific page in the documentation, and each folder as being a related collection of pages. The markdown page you are reading right now is found at /docs/example_docs/mkdocs/docs.md , for instance. Of course, you will want to replce the /docs/example_docs folder with your own documentation. Note You typically do not need to touch the /docs/gen_ref_pages.py script. It is used to automatically build the documentation for your code from its docstrings.","title":"Adding Markdown Files"},{"location":"example_docs/other/apps/","text":"Third-Party Apps \u00b6 Overview \u00b6 There are several configuration files provided for popular third-party applications that can be quite useful: The /.deepsource.toml file is a configuration file for the web platform DeepSource , which has a useful GitHub extension for cleaning up your code and spotting common errors. The /.sourcery.yaml file is a configuration file for Sourcery , which can automatically refactor your code. The /.codecov.yml file is a configuration file for Codecov , which will tell you the fraction of lines covered by your test suite if the GitHub integration is enabled.","title":"Third-Party Apps"},{"location":"example_docs/other/apps/#third-party-apps","text":"","title":"Third-Party Apps"},{"location":"example_docs/other/apps/#overview","text":"There are several configuration files provided for popular third-party applications that can be quite useful: The /.deepsource.toml file is a configuration file for the web platform DeepSource , which has a useful GitHub extension for cleaning up your code and spotting common errors. The /.sourcery.yaml file is a configuration file for Sourcery , which can automatically refactor your code. The /.codecov.yml file is a configuration file for Codecov , which will tell you the fraction of lines covered by your test suite if the GitHub integration is enabled.","title":"Overview"},{"location":"example_docs/other/linting/","text":"Linting and Formatting \u00b6 Overview \u00b6 When you installed the [dev] dependencies, you installed several code-formatting and linting tools, including: black : A very useful and opinionated code formatter, which you can use by running black . in the base directory. isort : A utility that will sort your import statements for you, which you can use by running isort . in the base directory. ruff : A versatile Python linter to clean up your code, which you can use by running ruff . --fix in the base directory. docformatter : A simple docstring formatter, which you can use by running docformatter . -r -i in the base directory. Modifications to the rules these formatters use can be defined in the pyproject.toml file, and we have chosen some useful defaults.","title":"Linting and Formatting"},{"location":"example_docs/other/linting/#linting-and-formatting","text":"","title":"Linting and Formatting"},{"location":"example_docs/other/linting/#overview","text":"When you installed the [dev] dependencies, you installed several code-formatting and linting tools, including: black : A very useful and opinionated code formatter, which you can use by running black . in the base directory. isort : A utility that will sort your import statements for you, which you can use by running isort . in the base directory. ruff : A versatile Python linter to clean up your code, which you can use by running ruff . --fix in the base directory. docformatter : A simple docstring formatter, which you can use by running docformatter . -r -i in the base directory. Modifications to the rules these formatters use can be defined in the pyproject.toml file, and we have chosen some useful defaults.","title":"Overview"},{"location":"example_docs/setup/basics/","text":"Initial Changes \u00b6 At this point, you now have your DrugDiscMDConformers repository on GitHub and locally on your machine. Now it's time to start making some modifications. README \u00b6 The first thing to do is update the README ( /README.md ), which should contain a user-friendly summary of what your package is all about. This can be whatever you want. Feel free to be creative! License \u00b6 The DrugDiscMDConformers repository comes premade with a sample license ( /LICENSE.md ), in this case the very popular and permissive BSD 3-Clause license . Feel free to change this for your own project or keep it as-is if you don't quite know yet. Tip There are many licenses that one can consider. A comprehensive list can be found on the Open Source Initiative website, but a less overwhelming route is to use choosealicense.com . Code of Conduct \u00b6 The DrugDiscMDConformers repository ships with a premade Code of Conduct ( /CODE_OF_CONDUCT.md ) that is obtained from the Contributor Covenant . Of course, you can feel free to keep or change this as you see fit, but it is often a good idea to have a code of conduct for public repositories.","title":"Initial Changes"},{"location":"example_docs/setup/basics/#initial-changes","text":"At this point, you now have your DrugDiscMDConformers repository on GitHub and locally on your machine. Now it's time to start making some modifications.","title":"Initial Changes"},{"location":"example_docs/setup/basics/#readme","text":"The first thing to do is update the README ( /README.md ), which should contain a user-friendly summary of what your package is all about. This can be whatever you want. Feel free to be creative!","title":"README"},{"location":"example_docs/setup/basics/#license","text":"The DrugDiscMDConformers repository comes premade with a sample license ( /LICENSE.md ), in this case the very popular and permissive BSD 3-Clause license . Feel free to change this for your own project or keep it as-is if you don't quite know yet. Tip There are many licenses that one can consider. A comprehensive list can be found on the Open Source Initiative website, but a less overwhelming route is to use choosealicense.com .","title":"License"},{"location":"example_docs/setup/basics/#code-of-conduct","text":"The DrugDiscMDConformers repository ships with a premade Code of Conduct ( /CODE_OF_CONDUCT.md ) that is obtained from the Contributor Covenant . Of course, you can feel free to keep or change this as you see fit, but it is often a good idea to have a code of conduct for public repositories.","title":"Code of Conduct"},{"location":"example_docs/setup/name/","text":"Updating the Name \u00b6 Now for your first major task: replace all instances of the word \"DrugDiscMDConformers\" with your desired package name . Note Don't forget to update the name of the /src/DrugDiscMDConformers folder, e.g. so that it is of the form src/<MyPackageName> . Tip If you're using Visual Studio Code as your editor, you can do ctrl+shift+H to find-and-replace all instances of \"DrugDiscMDConformers\" with your own package name.","title":"Updating the Name"},{"location":"example_docs/setup/name/#updating-the-name","text":"Now for your first major task: replace all instances of the word \"DrugDiscMDConformers\" with your desired package name . Note Don't forget to update the name of the /src/DrugDiscMDConformers folder, e.g. so that it is of the form src/<MyPackageName> . Tip If you're using Visual Studio Code as your editor, you can do ctrl+shift+H to find-and-replace all instances of \"DrugDiscMDConformers\" with your own package name.","title":"Updating the Name"},{"location":"example_docs/setup/prep/","text":"Preparatory Steps \u00b6 Naming Your Package \u00b6 So, you have an idea for your own Python package. The first thing you'll need to do is come up with a name! Tip If you plan on making a Python package that is widely distributed, first check to see if the name already exists on PyPI . Making a Repository \u00b6 With a nice name in mind, create a new repository using this DrugDiscMDConformers. Give it a name, a description, and decide if you want it to be public or private. Cloning Your Repository \u00b6 You'll now want to clone the repository to your local machine so you can easily make changes. Via a Desktop Client \u00b6 You can use a desktop client to interface with GitHub. It is worthwhile to learn how to use such a program for your day-to-day work. Tip We strongly suggest using GitKraken to interface with git and GitHub. GitKraken Pro is also free for students . Via the Command Line \u00b6 If you prefer, you can clone the repository via the following command in the command-line, provided you have git installed. git clone https://github.com/MyAccountName/MyPackageName You can get the URL directly from the GitHub page when you click the green \"<> Code\" button.","title":"Preparatory Steps"},{"location":"example_docs/setup/prep/#preparatory-steps","text":"","title":"Preparatory Steps"},{"location":"example_docs/setup/prep/#naming-your-package","text":"So, you have an idea for your own Python package. The first thing you'll need to do is come up with a name! Tip If you plan on making a Python package that is widely distributed, first check to see if the name already exists on PyPI .","title":"Naming Your Package"},{"location":"example_docs/setup/prep/#making-a-repository","text":"With a nice name in mind, create a new repository using this DrugDiscMDConformers. Give it a name, a description, and decide if you want it to be public or private.","title":"Making a Repository"},{"location":"example_docs/setup/prep/#cloning-your-repository","text":"You'll now want to clone the repository to your local machine so you can easily make changes.","title":"Cloning Your Repository"},{"location":"example_docs/setup/prep/#via-a-desktop-client","text":"You can use a desktop client to interface with GitHub. It is worthwhile to learn how to use such a program for your day-to-day work. Tip We strongly suggest using GitKraken to interface with git and GitHub. GitKraken Pro is also free for students .","title":"Via a Desktop Client"},{"location":"example_docs/setup/prep/#via-the-command-line","text":"If you prefer, you can clone the repository via the following command in the command-line, provided you have git installed. git clone https://github.com/MyAccountName/MyPackageName You can get the URL directly from the GitHub page when you click the green \"<> Code\" button.","title":"Via the Command Line"},{"location":"reference/SUMMARY/","text":"DrugDiscMDConformers confgen_rdkit examples sample getEnergy getEnergy_sol main run sol_run","title":"SUMMARY"},{"location":"reference/DrugDiscMDConformers/confgen_rdkit/","text":"","title":"confgen_rdkit"},{"location":"reference/DrugDiscMDConformers/getEnergy/","text":"","title":"getEnergy"},{"location":"reference/DrugDiscMDConformers/getEnergy_sol/","text":"","title":"getEnergy_sol"},{"location":"reference/DrugDiscMDConformers/main/","text":"","title":"main"},{"location":"reference/DrugDiscMDConformers/run/","text":"","title":"run"},{"location":"reference/DrugDiscMDConformers/sol_run/","text":"e2 \u00b6 e2 ( i ) Run optimization calculations for solvated conformers. Args: i (str): Index of the conformer. Returns: None Source code in DrugDiscMDConformers/sol_run.py 7 8 9 10 11 12 13 14 15 16 17 18 def e2 ( i : str ) -> None : \"\"\"Run optimization calculations for solvated conformers. Args: i (str): Index of the conformer. Returns: None \"\"\" os . chdir ( f 'sol_conf_ { i } ' ) os . system ( f 'xtb conf_ { i } .xyz --ohess -P 1 --gfn 2 --alpb water > conf_ { i } .log' ) os . chdir ( '../../../' ) run_solvated_optimization \u00b6 run_solvated_optimization ( num1 , num2 ) Run optimization calculations for solvated conformers. Args: num1 (int): Start index of the conformers. num2 (int): End index of the conformers. Returns: None Source code in DrugDiscMDConformers/sol_run.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def run_solvated_optimization ( num1 : int , num2 : int ) -> None : \"\"\"Run optimization calculations for solvated conformers. Args: num1 (int): Start index of the conformers. num2 (int): End index of the conformers. Returns: None \"\"\" if __name__ == '__main__' : os . chdir ( 'molecular_files' ) os . chdir ( 'rdkit_conformers' ) v : List [ str ] = [ \" %.4d \" % i for i in range ( num1 , num2 )] # Generating a pool of parallel processes with Pool ( 46 ) as p : # Using 46 processes due to the limit of 48 cores on the computing machine p . map ( e2 , v ) os . chdir ( '../../../' ) os . chdir ( '../../../' )","title":"sol_run"},{"location":"reference/DrugDiscMDConformers/sol_run/#DrugDiscMDConformers.sol_run.e2","text":"e2 ( i ) Run optimization calculations for solvated conformers. Args: i (str): Index of the conformer. Returns: None Source code in DrugDiscMDConformers/sol_run.py 7 8 9 10 11 12 13 14 15 16 17 18 def e2 ( i : str ) -> None : \"\"\"Run optimization calculations for solvated conformers. Args: i (str): Index of the conformer. Returns: None \"\"\" os . chdir ( f 'sol_conf_ { i } ' ) os . system ( f 'xtb conf_ { i } .xyz --ohess -P 1 --gfn 2 --alpb water > conf_ { i } .log' ) os . chdir ( '../../../' )","title":"e2"},{"location":"reference/DrugDiscMDConformers/sol_run/#DrugDiscMDConformers.sol_run.run_solvated_optimization","text":"run_solvated_optimization ( num1 , num2 ) Run optimization calculations for solvated conformers. Args: num1 (int): Start index of the conformers. num2 (int): End index of the conformers. Returns: None Source code in DrugDiscMDConformers/sol_run.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def run_solvated_optimization ( num1 : int , num2 : int ) -> None : \"\"\"Run optimization calculations for solvated conformers. Args: num1 (int): Start index of the conformers. num2 (int): End index of the conformers. Returns: None \"\"\" if __name__ == '__main__' : os . chdir ( 'molecular_files' ) os . chdir ( 'rdkit_conformers' ) v : List [ str ] = [ \" %.4d \" % i for i in range ( num1 , num2 )] # Generating a pool of parallel processes with Pool ( 46 ) as p : # Using 46 processes due to the limit of 48 cores on the computing machine p . map ( e2 , v ) os . chdir ( '../../../' ) os . chdir ( '../../../' )","title":"run_solvated_optimization"},{"location":"reference/DrugDiscMDConformers/examples/sample/","text":"add \u00b6 add ( a , b ) A function that adds two numbers. Parameters: a ( float ) \u2013 First number to add. b ( float ) \u2013 Second number to add. Returns: float \u2013 The sum of a and b. Source code in DrugDiscMDConformers/examples/sample.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def add ( a : float , b : float ) -> float : \"\"\" A function that adds two numbers. Parameters ---------- a First number to add. b Second number to add. Returns ------- float The sum of a and b. \"\"\" return a + b divide \u00b6 divide ( a , b ) A function that divides two numbers, i.e. a/b. Parameters: a ( float ) \u2013 The numerator b ( float ) \u2013 The denominator Returns: float \u2013 The value for a/b Source code in DrugDiscMDConformers/examples/sample.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def divide ( a : float , b : float ) -> float : \"\"\" A function that divides two numbers, i.e. a/b. Parameters ---------- a The numerator b The denominator Returns ------- float The value for a/b \"\"\" if b == 0 : raise ValueError ( \"Uh oh! The value for b should not be 0.\" ) return a / b make_array \u00b6 make_array ( val , length = 3 ) A function to transform a number into a numpy array. Parameters: val ( float ) \u2013 Number to turn into an array. length ( int , default: 3 ) \u2013 The length of the array. Returns: NDArray \u2013 An array composed of val . Source code in DrugDiscMDConformers/examples/sample.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def make_array ( val : float , length : int = 3 ) -> NDArray : \"\"\" A function to transform a number into a numpy array. Parameters ---------- val Number to turn into an array. length The length of the array. Returns ------- NDArray An array composed of `val`. \"\"\" return np . array ([ val ] * length )","title":"sample"},{"location":"reference/DrugDiscMDConformers/examples/sample/#DrugDiscMDConformers.examples.sample.add","text":"add ( a , b ) A function that adds two numbers. Parameters: a ( float ) \u2013 First number to add. b ( float ) \u2013 Second number to add. Returns: float \u2013 The sum of a and b. Source code in DrugDiscMDConformers/examples/sample.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def add ( a : float , b : float ) -> float : \"\"\" A function that adds two numbers. Parameters ---------- a First number to add. b Second number to add. Returns ------- float The sum of a and b. \"\"\" return a + b","title":"add"},{"location":"reference/DrugDiscMDConformers/examples/sample/#DrugDiscMDConformers.examples.sample.divide","text":"divide ( a , b ) A function that divides two numbers, i.e. a/b. Parameters: a ( float ) \u2013 The numerator b ( float ) \u2013 The denominator Returns: float \u2013 The value for a/b Source code in DrugDiscMDConformers/examples/sample.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def divide ( a : float , b : float ) -> float : \"\"\" A function that divides two numbers, i.e. a/b. Parameters ---------- a The numerator b The denominator Returns ------- float The value for a/b \"\"\" if b == 0 : raise ValueError ( \"Uh oh! The value for b should not be 0.\" ) return a / b","title":"divide"},{"location":"reference/DrugDiscMDConformers/examples/sample/#DrugDiscMDConformers.examples.sample.make_array","text":"make_array ( val , length = 3 ) A function to transform a number into a numpy array. Parameters: val ( float ) \u2013 Number to turn into an array. length ( int , default: 3 ) \u2013 The length of the array. Returns: NDArray \u2013 An array composed of val . Source code in DrugDiscMDConformers/examples/sample.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def make_array ( val : float , length : int = 3 ) -> NDArray : \"\"\" A function to transform a number into a numpy array. Parameters ---------- val Number to turn into an array. length The length of the array. Returns ------- NDArray An array composed of `val`. \"\"\" return np . array ([ val ] * length )","title":"make_array"}]}